--- src/src/mem.h.orig
+++ src/src/mem.h
@@ -101,15 +101,22 @@
     // must be an integral multiple of alignment.
     return aligned_alloc(align, ROUND_UP(sz, align));
 #else
-#error No aligned allocation functions are available
+    void *const buf = malloc(sz + align + sizeof(void *));
+    if (__builtin_expect(!buf, 0)) return NULL;
+
+    void *const ptr = (void *)(((uintptr_t)buf + sizeof(void *) + align - 1) & ~(align - 1));
+    ((void **)ptr)[-1] = buf;
+    return ptr;
 #endif
 }
 
 static inline void dav1d_free_aligned_internal(void *ptr) {
 #ifdef _WIN32
     _aligned_free(ptr);
-#else
+#elif HAVE_POSIX_MEMALIGN || HAVE_MEMALIGN || HAVE_ALIGNED_ALLOC
     free(ptr);
+#else
+    if (__builtin_expect(ptr != NULL, 1)) free(((void **)ptr)[-1]);
 #endif
 }
 
